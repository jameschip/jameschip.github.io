{{ h1 GDB }}

GDB is a C debugger for the cli, it allows stepping through a program, setting breakpoints, watching variables and many other more complex things too.

{{ h2 Compiling for GDB }}

{{ cb gcc -g program.c -o program }}{{br}}

Use the -g flag to keep the debug symbols in your output binary.

{{ h2 Running GDB }}

{{ cb gdb ./program  }}

{{ h1 Using! }}

Once you launch gdb you will be presented with a basic prompt. Your program wont run untill you type {{ it run }} at the prompt.

{{ h2 Getting a sensible view of your code }} 

At the prompt type {{ cd layout src }} to get a view of your code where you can see the debugger progress. Other layouts are available:
{{ cb 
next - Display the next layout
prev - Display the previous layout
src - Display the source and command windows
asm - display the assembly and command windows
split - display the src, asm and ccommand windows
regs - display the register window along with src, asm or split.
}}

{{ h2 Setting a breakpoint }}

{{ li http://www.gdbtutorial.com/gdb-breakpoints-example Tutorial }}{{br}}{{ br }}
Many ways, here are a few:

{{ cb 
break file.c:17 <- set a breakpoint on line 17 in file.c
break func_name <- set a breakpoint at a function start
break (+/-)3 <- set a breakpoint offset from current location
}} 

To continure execution after a breakpoint type {{ cb  continue }} at the prompt.

{{ h2  Stepping }}

Type an {{ cb n }} at the prompt to step to the next line. Type an {{ cb s }} to step into a function.

{{ Viewing variables }}

{{ cb print variable_name }}
